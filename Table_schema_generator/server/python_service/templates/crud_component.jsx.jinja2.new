import React, { useState, useEffect } from 'react';
import axios from 'axios';
import {
  Box,
  Button,
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  TablePagination,
  Typography,
  TextField,
  InputAdornment,
  IconButton,
  Tooltip,
  CircularProgress,
  Chip,
  Dialog,
  DialogActions,
  DialogContent,
  DialogContentText,
  DialogTitle,
  Grid,
  Snackbar,
  Alert,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  FormHelperText,
  Stack,
  Divider,
  Switch,
  FormControlLabel,
} from '@mui/material';
import {
  Search as SearchIcon,
  Refresh as RefreshIcon,
  ArrowUpward as ArrowUpwardIcon,
  ArrowDownward as ArrowDownwardIcon,
  FilterList as FilterIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  Add as AddIcon,
  Save as SaveIcon,
  Cancel as CancelIcon,
  Visibility as VisibilityIcon,
} from '@mui/icons-material';

/**
 * {{ component_name }} - CRUD component for {{ table_name }}
 * 
 * Generated by Table Schema Generator
 * https://github.com/yourusername/table-schema-generator
 */
const {{ component_name }} = () => {
  // State for data
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  
  // State for CRUD operations
  const [formMode, setFormMode] = useState(null); // 'create', 'edit', 'view', or null
  const [selectedItem, setSelectedItem] = useState(null);
  const [formData, setFormData] = useState({
    {% for field in all_fields %}
    {{ field.name }}: {{ get_default_value(field) }}{% if not loop.last %},{% endif %}
    {% endfor %}
  });
  const [formErrors, setFormErrors] = useState({});
  
  // State for delete confirmation dialog
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [itemToDelete, setItemToDelete] = useState(null);
  
  // State for notifications
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [notification, setNotification] = useState({
    message: '',
    severity: 'success'
  });
  
  {% if options.pagination %}
  // State for pagination
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(10);
  const [totalCount, setTotalCount] = useState(0);
  {% endif %}
  
  {% if options.sorting %}
  // State for sorting
  const [sortBy, setSortBy] = useState('{{ primary_key }}');
  const [sortDirection, setSortDirection] = useState('asc');
  {% endif %}
  
  {% if options.search %}
  // State for search
  const [searchQuery, setSearchQuery] = useState('');
  {% endif %}
  
  // State for filtered data
  const [filteredData, setFilteredData] = useState([]);
  
  // Fetch data on component mount
  useEffect(() => {
    fetchData();
  }, []);
  
  // Reset form errors when form data changes
  useEffect(() => {
    setFormErrors({});
  }, [formData]);
  
  {% if options.pagination or options.sorting or options.search %}
  // Apply filtering, sorting, and pagination
  useEffect(() => {
    let result = [...data];
    
    {% if options.search %}
    // Apply search filter
    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      result = result.filter(item => {
        return (
          {% for field in fields %}
          (item.{{ field.name }} !== null && item.{{ field.name }} !== undefined && 
           String(item.{{ field.name }}).toLowerCase().includes(query)){% if not loop.last %} ||{% endif %}
          {% endfor %}
        );
      });
    }
    {% endif %}
    
    {% if options.sorting %}
    // Apply sorting
    if (sortBy) {
      result.sort((a, b) => {
        const valueA = a[sortBy] === null ? '' : a[sortBy];
        const valueB = b[sortBy] === null ? '' : b[sortBy];
        
        if (typeof valueA === 'string' && typeof valueB === 'string') {
          return sortDirection === 'asc' 
            ? valueA.localeCompare(valueB) 
            : valueB.localeCompare(valueA);
        } else {
          return sortDirection === 'asc' 
            ? (valueA > valueB ? 1 : -1) 
            : (valueA < valueB ? 1 : -1);
        }
      });
    }
    {% endif %}
    
    {% if options.pagination %}
    // Update total count for pagination
    setTotalCount(result.length);
    
    // Apply pagination
    result = result.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage);
    {% endif %}
    
    setFilteredData(result);
  }, [
    data, 
    {% if options.search %}searchQuery, {% endif %}
    {% if options.sorting %}sortBy, sortDirection, {% endif %}
    {% if options.pagination %}page, rowsPerPage{% endif %}
  ]);
  {% else %}
  // Set filtered data to all data when no filtering options are enabled
  useEffect(() => {
    setFilteredData(data);
  }, [data]);
  {% endif %}
  
  // Fetch data from API
  const fetchData = async () => {
    setLoading(true);
    setError(null);
    
    try {
      // Replace with your actual API endpoint
      const response = await axios.get('/api/{{ table_name }}');
      setData(response.data);
    } catch (err) {
      console.error('Error fetching data:', err);
      setError('Failed to fetch data. Please try again later.');
      
      // For demo purposes, generate mock data if API fails
      generateMockData();
    } finally {
      setLoading(false);
    }
  };
  
  // Generate mock data for demo purposes
  const generateMockData = () => {
    const mockData = [];
    for (let i = 1; i <= 50; i++) {
      mockData.push({
        {% for field in all_fields %}
        {{ field.name }}: generateMockValue('{{ field.type }}', '{{ field.name }}', i){% if not loop.last %},{% endif %}
        {% endfor %}
      });
    }
    setData(mockData);
  };
  
  // Generate mock value based on field type
  const generateMockValue = (type, name, index) => {
    type = type.toUpperCase();
    
    if (name === '{{ primary_key }}') {
      return index;
    } else if (name.includes('name') || name.includes('title')) {
      return `Sample ${name.charAt(0).toUpperCase() + name.slice(1)} ${index}`;
    } else if (name.includes('email')) {
      return `user${index}@example.com`;
    } else if (name.includes('phone')) {
      return `555-${String(index).padStart(4, '0')}`;
    } else if (name.includes('address')) {
      return `${index} Main Street`;
    } else if (name.includes('description') || name.includes('content')) {
      return `This is a sample ${name} for record ${index}.`;
    } else if (type.includes('DATE') || type.includes('TIME')) {
      return new Date(Date.now() - Math.floor(Math.random() * 10000000000)).toISOString();
    } else if (type.includes('INT') || type.includes('FLOAT') || type.includes('DOUBLE') || type.includes('DECIMAL')) {
      return Math.floor(Math.random() * 1000);
    } else if (type.includes('BOOL')) {
      return Math.random() > 0.5;
    } else {
      return `Sample ${name} ${index}`;
    }
  };
  
  // Handle form input changes
  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
  };
  
  // Validate form data
  const validateForm = () => {
    const errors = {};
    let isValid = true;
    
    {% for field in all_fields %}
    {% if not field.nullable and not field.primaryKey %}
    if (!formData.{{ field.name }} && formData.{{ field.name }} !== 0) {
      errors.{{ field.name }} = '{{ field.name | replace('_', ' ') | title }} is required';
      isValid = false;
    }
    {% endif %}
    {% endfor %}
    
    setFormErrors(errors);
    return isValid;
  };
  
  // Handle form submission
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }
    
    setLoading(true);
    
    try {
      let response;
      
      if (formMode === 'create') {
        // Replace with your actual API endpoint
        response = await axios.post('/api/{{ table_name }}', formData);
        
        // For demo purposes, add to local data
        const newItem = { ...formData, {{ primary_key }}: data.length + 1 };
        setData(prev => [...prev, newItem]);
        
        showNotification('Item created successfully', 'success');
      } else if (formMode === 'edit') {
        // Replace with your actual API endpoint
        response = await axios.put(`/api/{{ table_name }}/${formData.{{ primary_key }}}`, formData);
        
        // For demo purposes, update local data
        setData(prev => prev.map(item => 
          item.{{ primary_key }} === formData.{{ primary_key }} ? formData : item
        ));
        
        showNotification('Item updated successfully', 'success');
      }
      
      // Reset form and close
      resetForm();
    } catch (err) {
      console.error('Error saving data:', err);
      showNotification('Failed to save data. Please try again.', 'error');
      
      // For demo purposes, update local data anyway
      if (formMode === 'create') {
        const newItem = { ...formData, {{ primary_key }}: data.length + 1 };
        setData(prev => [...prev, newItem]);
      } else if (formMode === 'edit') {
        setData(prev => prev.map(item => 
          item.{{ primary_key }} === formData.{{ primary_key }} ? formData : item
        ));
      }
      
      // Reset form and close
      resetForm();
    } finally {
      setLoading(false);
    }
  };
  
  // Handle create button click
  const handleCreateClick = () => {
    setFormMode('create');
    setFormData({
      {% for field in all_fields %}
      {{ field.name }}: {{ get_default_value(field) }}{% if not loop.last %},{% endif %}
      {% endfor %}
    });
  };
  
  // Handle edit button click
  const handleEditClick = (item) => {
    setFormMode('edit');
    setSelectedItem(item);
    setFormData({ ...item });
  };
  
  // Handle view button click
  const handleViewClick = (item) => {
    setFormMode('view');
    setSelectedItem(item);
    setFormData({ ...item });
  };
  
  // Handle delete button click
  const handleDeleteClick = (item) => {
    setItemToDelete(item);
    setDeleteDialogOpen(true);
  };
  
  // Handle delete confirmation
  const handleDeleteConfirm = async () => {
    if (!itemToDelete) return;
    
    setLoading(true);
    
    try {
      // Replace with your actual API endpoint
      await axios.delete(`/api/{{ table_name }}/${itemToDelete.{{ primary_key }}}`);
      
      // For demo purposes, remove from local data
      setData(prev => prev.filter(item => item.{{ primary_key }} !== itemToDelete.{{ primary_key }}));
      
      showNotification('Item deleted successfully', 'success');
    } catch (err) {
      console.error('Error deleting data:', err);
      showNotification('Failed to delete data. Please try again.', 'error');
      
      // For demo purposes, remove from local data anyway
      setData(prev => prev.filter(item => item.{{ primary_key }} !== itemToDelete.{{ primary_key }}));
    } finally {
      setLoading(false);
      setDeleteDialogOpen(false);
      setItemToDelete(null);
    }
  };
  
  // Handle cancel button click
  const handleCancelClick = () => {
    resetForm();
  };
  
  // Reset form and form mode
  const resetForm = () => {
    setFormMode(null);
    setSelectedItem(null);
    setFormData({
      {% for field in all_fields %}
      {{ field.name }}: {{ get_default_value(field) }}{% if not loop.last %},{% endif %}
      {% endfor %}
    });
    setFormErrors({});
  };
  
  // Show notification
  const handleCloseSnackbar = () => {
    setSnackbarOpen(false);
  };
  
  const showNotification = (message, severity) => {
    setNotification({ message, severity });
    setSnackbarOpen(true);
  };
  
  {% if options.sorting %}
  // Handle sort request
  const handleSort = (field) => {
    if (sortBy === field) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortBy(field);
      setSortDirection('asc');
    }
  };
  
  // Render sort icon
  const renderSortIcon = (field) => {
    if (sortBy !== field) {
      return null;
    }
    
    return sortDirection === 'asc' ? <ArrowUpwardIcon fontSize="small" /> : <ArrowDownwardIcon fontSize="small" />;
  };
  {% endif %}
  
  {% if options.pagination %}
  // Handle page change
  const handleChangePage = (event, newPage) => {
    setPage(newPage);
  };
  
  // Handle rows per page change
  const handleChangeRowsPerPage = (event) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };
  {% endif %}
  
  {% if options.search %}
  // Handle search input change
  const handleSearchChange = (e) => {
    setSearchQuery(e.target.value);
    setPage(0);
  };
  
  // Handle search clear
  const handleSearchClear = () => {
    setSearchQuery('');
  };
  {% endif %}
  
  {% if options.refresh %}
  // Handle refresh button click
  const handleRefreshClick = () => {
    fetchData();
  };
  {% endif %}
  
  // Render form fields
  const renderFormFields = () => {
    return (
      <Grid container spacing={2}>
        {% for field in all_fields %}
        {% if field.primaryKey and formMode === 'create' %}
        {/* Primary key field is hidden in create mode */}
        {% else %}
        <Grid item xs={12} sm={6} md={4}>
          <TextField
            margin="normal"
            required={{% if field.nullable or field.primaryKey %}false{% else %}true{% endif %}}
            fullWidth
            id="{{ field.name }}"
            label="{{ field.name | replace('_', ' ') | title }}"
            name="{{ field.name }}"
            autoComplete="{{ field.name }}"
            value={formData.{{ field.name }} || ''}
            onChange={handleInputChange}
            error={!!formErrors.{{ field.name }}}
            helperText={formErrors.{{ field.name }} || ''}
            disabled={formMode === 'view' || (formMode === 'edit' && {{ 'true' if field.primaryKey else 'false' }})}
            type="{{ get_input_type(field) }}"
            InputLabelProps={
              {{ '{shrink: true}' if get_input_type(field) in ['date', 'datetime-local'] else '{}'}}
            }
          />
        </Grid>
        {% endif %}
        {% endfor %}
      </Grid>
    );
  };
  
  // Render form view
  const renderForm = () => {
    return (
      <Box component="form" onSubmit={handleSubmit} noValidate sx={{ mt: 2 }}>
        <Paper elevation={3} sx={{ p: 3 }}>
          <Typography variant="h6" gutterBottom>
            {formMode === 'create' ? 'Create New' : formMode === 'edit' ? 'Edit' : 'View'} {{ pascal_case(table_name) }}
          </Typography>
          <Divider sx={{ mb: 3 }} />
          
          {renderFormFields()}
          
          <Box sx={{ mt: 3, display: 'flex', justifyContent: 'flex-end' }}>
            <Button
              variant="outlined"
              onClick={handleCancelClick}
              sx={{ mr: 1 }}
              startIcon={<CancelIcon />}
            >
              Cancel
            </Button>
            
            {formMode !== 'view' && (
              <Button
                type="submit"
                variant="contained"
                color="primary"
                disabled={loading}
                startIcon={<SaveIcon />}
              >
                {loading ? <CircularProgress size={24} /> : 'Save'}
              </Button>
            )}
          </Box>
        </Paper>
      </Box>
    );
  };
  
  // Render table view
  const renderTable = () => {
    return (
      <Paper elevation={3} sx={{ width: '100%', overflow: 'hidden' }}>
        <Box sx={{ p: 2, display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
          <Typography variant="h6" component="div">
            {{ page_title }}
          </Typography>
          
          <Box sx={{ display: 'flex', alignItems: 'center' }}>
            {% if options.search %}
            <TextField
              size="small"
              placeholder="Search..."
              value={searchQuery}
              onChange={handleSearchChange}
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <SearchIcon />
                  </InputAdornment>
                ),
                endAdornment: searchQuery && (
                  <InputAdornment position="end">
                    <IconButton size="small" onClick={handleSearchClear}>
                      <CancelIcon fontSize="small" />
                    </IconButton>
                  </InputAdornment>
                )
              }}
              sx={{ mr: 1 }}
            />
            {% endif %}
            
            {% if options.refresh %}
            <Tooltip title="Refresh">
              <IconButton onClick={handleRefreshClick} disabled={loading}>
                <RefreshIcon />
              </IconButton>
            </Tooltip>
            {% endif %}
            
            <Button
              variant="contained"
              color="primary"
              startIcon={<AddIcon />}
              onClick={handleCreateClick}
              sx={{ ml: 1 }}
            >
              Create
            </Button>
          </Box>
        </Box>
        
        <TableContainer sx={{ maxHeight: 440 }}>
          <Table stickyHeader aria-label="{{ table_name }} table">
            <TableHead>
              <TableRow>
                {% for field in fields %}
                <TableCell
                  {% if options.sorting %}
                  onClick={() => handleSort('{{ field.name }}')}
                  sx={{ cursor: 'pointer' }}
                  {% endif %}
                >
                  <Box sx={{ display: 'flex', alignItems: 'center' }}>
                    {{ field.name | replace('_', ' ') | title }}
                    {% if options.sorting %}
                    {renderSortIcon('{{ field.name }}')}
                    {% endif %}
                  </Box>
                </TableCell>
                {% endfor %}
                <TableCell align="right">Actions</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {loading ? (
                <TableRow>
                  <TableCell colSpan={{{ fields|length + 1 }}} align="center">
                    <CircularProgress />
                  </TableCell>
                </TableRow>
              ) : error ? (
                <TableRow>
                  <TableCell colSpan={{{ fields|length + 1 }}} align="center">
                    <Typography color="error">{error}</Typography>
                  </TableCell>
                </TableRow>
              ) : filteredData.length === 0 ? (
                <TableRow>
                  <TableCell colSpan={{{ fields|length + 1 }}} align="center">
                    No data found
                  </TableCell>
                </TableRow>
              ) : (
                filteredData.map((row) => (
                  <TableRow key={row.{{ primary_key }}}>
                    {% for field in fields %}
                    <TableCell>
                      {row.{{ field.name }} !== null && row.{{ field.name }} !== undefined
                        ? {% if 'DATE' in field.type|upper or 'TIME' in field.type|upper %}
                          new Date(row.{{ field.name }}).toLocaleString()
                          {% elif 'BOOL' in field.type|upper %}
                          row.{{ field.name }} ? 'Yes' : 'No'
                          {% else %}
                          String(row.{{ field.name }})
                          {% endif %}
                        : ''}
                    </TableCell>
                    {% endfor %}
                    <TableCell align="right">
                      <Tooltip title="View">
                        <IconButton onClick={() => handleViewClick(row)} size="small">
                          <VisibilityIcon fontSize="small" />
                        </IconButton>
                      </Tooltip>
                      <Tooltip title="Edit">
                        <IconButton onClick={() => handleEditClick(row)} size="small">
                          <EditIcon fontSize="small" />
                        </IconButton>
                      </Tooltip>
                      <Tooltip title="Delete">
                        <IconButton onClick={() => handleDeleteClick(row)} size="small">
                          <DeleteIcon fontSize="small" />
                        </IconButton>
                      </Tooltip>
                    </TableCell>
                  </TableRow>
                ))
              )}
            </TableBody>
          </Table>
        </TableContainer>
        
        {% if options.pagination %}
        <TablePagination
          rowsPerPageOptions={[5, 10, 25, 50]}
          component="div"
          count={totalCount}
          rowsPerPage={rowsPerPage}
          page={page}
          onPageChange={handleChangePage}
          onRowsPerPageChange={handleChangeRowsPerPage}
        />
        {% endif %}
      </Paper>
    );
  };
  
  return (
    <Box sx={{ width: '100%' }}>
      {formMode ? renderForm() : renderTable()}
      
      {/* Delete confirmation dialog */}
      <Dialog
        open={deleteDialogOpen}
        onClose={() => setDeleteDialogOpen(false)}
      >
        <DialogTitle>Confirm Delete</DialogTitle>
        <DialogContent>
          <DialogContentText>
            Are you sure you want to delete this item? This action cannot be undone.
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setDeleteDialogOpen(false)}>Cancel</Button>
          <Button onClick={handleDeleteConfirm} color="error" autoFocus>
            Delete
          </Button>
        </DialogActions>
      </Dialog>
      
      {/* Notification snackbar */}
      <Snackbar
        open={snackbarOpen}
        autoHideDuration={6000}
        onClose={handleCloseSnackbar}
      >
        <Alert onClose={handleCloseSnackbar} severity={notification.severity}>
          {notification.message}
        </Alert>
      </Snackbar>
    </Box>
  );
};

export default {{ component_name }};