import React, { useState, useEffect } from 'react';
import {
  Box,
  Button,
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Typography,
  TextField,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  Grid
} from '@mui/material';

/**
 * {{ component_name }} - Component for {{ table_name }}
 */
const {{ component_name }} = () => {
  // State for data
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(false);
  
  // State for form
  const [open, setOpen] = useState(false);
  const [formData, setFormData] = useState({% raw %}{{% endraw %}
    {% for field in all_fields %}
    {{ field.name }}: null{% if not loop.last %},{% endif %}
    {% endfor %}
  {% raw %}}{% endraw %});
  
  // Fetch data on component mount
  useEffect(() => {
    // Mock data for demonstration
    const mockData = [];
    for (let i = 1; i <= 5; i++) {
      mockData.push({% raw %}{{% endraw %}
        {% for field in all_fields %}
        {{ field.name }}: generateMockValue('{{ field.type }}', '{{ field.name }}', i){% if not loop.last %},{% endif %}
        {% endfor %}
      {% raw %}}{% endraw %});
    }
    setData(mockData);
  }, []);
  
  // Generate mock value based on field type
  const generateMockValue = (type, name, index) => {
    if (name === '{{ primary_key }}') {
      return index;
    } else if (name.includes('name')) {
      return `Sample ${name} ${index}`;
    } else if (type.includes('INT')) {
      return index * 10;
    } else if (type.includes('DATE')) {
      return new Date().toISOString();
    } else {
      return `Sample ${name} ${index}`;
    }
  };
  
  // Handle form input changes
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({% raw %}{{
      ...prev,
      [name]: value
    }}{% endraw %}));
  };
  
  // Handle form submission
  const handleSubmit = () => {
    // Add new item to data
    setData(prev => [...prev, formData]);
    handleClose();
  };
  
  // Handle dialog open
  const handleOpen = () => {
    setOpen(true);
  };
  
  // Handle dialog close
  const handleClose = () => {
    setOpen(false);
    setFormData({% raw %}{{% endraw %}
      {% for field in all_fields %}
      {{ field.name }}: null{% if not loop.last %},{% endif %}
      {% endfor %}
    {% raw %}}{% endraw %});
  };
  
  return (
    <Box sx={% raw %}{{ width: '100%' }}{% endraw %}>
      <Paper elevation={3} sx={% raw %}{{ width: '100%', mb: 2, p: 2 }}{% endraw %}>
        <Box sx={% raw %}{{ display: 'flex', justifyContent: 'space-between', mb: 2 }}{% endraw %}>
          <Typography variant="h6" component="div">
            {{ page_title }}
          </Typography>
          <Button variant="contained" onClick={handleOpen}>
            Add New
          </Button>
        </Box>
        
        <TableContainer>
          <Table>
            <TableHead>
              <TableRow>
                {% for field in fields %}
                <TableCell>{{ field.name | replace('_', ' ') | title }}</TableCell>
                {% endfor %}
              </TableRow>
            </TableHead>
            <TableBody>
              {% raw %}{data.map((row) => (
                <TableRow key={row.{% endraw %}{{ primary_key }}{% raw %}}>
                  {% endraw %}{% for field in fields %}
                  <TableCell>{% raw %}{String(row.{% endraw %}{{ field.name }}{% raw %})}{% endraw %}</TableCell>
                  {% endfor %}{% raw %}
                </TableRow>
              ))}{% endraw %}
            </TableBody>
          </Table>
        </TableContainer>
      </Paper>
      
      <Dialog open={open} onClose={handleClose}>
        <DialogTitle>Add New {{ table_name | replace('_', ' ') | title }}</DialogTitle>
        <DialogContent>
          <Grid container spacing={2}>
            {% for field in all_fields %}
            {% if not field.primaryKey %}
            <Grid item xs={12} sm={6}>
              <TextField
                margin="normal"
                fullWidth
                id="{{ field.name }}"
                label="{{ field.name | replace('_', ' ') | title }}"
                name="{{ field.name }}"
                value={% raw %}{formData.{% endraw %}{{ field.name }}{% raw %} || ''}{% endraw %}
                onChange={% raw %}{handleInputChange}{% endraw %}
              />
            </Grid>
            {% endif %}
            {% endfor %}
          </Grid>
        </DialogContent>
        <DialogActions>
          <Button onClick={% raw %}{handleClose}{% endraw %}>Cancel</Button>
          <Button onClick={% raw %}{handleSubmit}{% endraw %}>Save</Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default {{ component_name }};