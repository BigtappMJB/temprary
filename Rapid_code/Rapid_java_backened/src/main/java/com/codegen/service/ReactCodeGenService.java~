package com.codegen.service;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import com.codegen.model.GeneratorInput;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer;

import com.codegen.exception.ServiceException;

import freemarker.template.Template;
import freemarker.template.TemplateException;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class ReactCodeGenService {

    @Autowired
    private FreeMarkerConfigurer freemarkerConfig;

    private void writeTemplateToFile(String templateName, Map<String, Object> dataModel, String outputPath)
            throws ServiceException {
        try {
            Template template = freemarkerConfig.getConfiguration().getTemplate(templateName);

            // Ensure parent directories exist
            File outputFile = new File(outputPath);
            File parentDir = outputFile.getParentFile();
            if (parentDir != null && !parentDir.exists()) {
                parentDir.mkdirs();
            }

            try (FileWriter out = new FileWriter(outputFile)) {
                template.process(dataModel, out);
            }
        } catch (IOException | TemplateException e) {
            throw new ServiceException("Failed to process template: " + templateName, e);
        }
    }

    public void createReactProjectStructure(String basePath) {
        try {
            new File(basePath).mkdirs();
            new File(basePath + "/public").mkdirs();
            new File(basePath + "/src/components").mkdirs();
            new File(basePath + "/src").mkdirs();
        } catch (Exception e) {
            throw new ServiceException("Failed to create React project structure at: " + basePath, e);
        }
    }

    public String generateReactApp(String basePath , String entityName, List<GeneratorInput.Field> fields, String primaryKey) {
        try {
            log.info("Starting React app generation for entity: {}", entityName);

            String firstCaptialReactComponent =  entityName.substring(0,1).toUpperCase() + entityName.substring(1);
            File baseDir = new File(basePath);
            deleteDirectory(baseDir);

            createReactProjectStructure(basePath);

            Map<String, Object> model = new HashMap<>();
            model.put("className", entityName);
            model.put("fields", fields);
            model.put("primaryKey", primaryKey);
            model.put("apiBaseUrl", "/api/" + getSimpleClassName(entityName).toLowerCase());
            // Generate React CRUD page component from Freemarker template

//            String reactComponentPath = basePath + "src/components/" + firstCaptialReactComponent + "Crud.jsx";
            File componentsDir = new File("C:\\Users\\MohammadJuned\\git\\Rapid_Code_Module\\rapid-code-generator-frontend\\rapid-frontend\\src\\components\\");
            if (!componentsDir.exists()) {
                componentsDir.mkdirs(); // Create the directory if it doesn't exist
            }


            String reactComponentPath = "C:\\Users\\MohammadJuned\\git\\Rapid_Code_Module\\rapid-code-generator-frontend\\rapid-frontend\\src\\components\\" + firstCaptialReactComponent + "Crud.jsx";
            writeTemplateToFile("ReactCurdPage.ftl", model, reactComponentPath);

            // Copy or generate other React app files: index.js, App.js, package.json, public/index.html
            // For example, write basic index.js
            writeBasicIndexJs(basePath);
            writeBasicAppJs(basePath, firstCaptialReactComponent);
            writeBasicPackageJson(basePath);
            writeBasicIndexHtml(basePath);

            // Zip the React app folder
            String zipPath = basePath + firstCaptialReactComponent+"-react.zip";
            zipFolder(basePath, zipPath);

            log.info("React app generation complete for entity: {}", entityName);
            return "React app generated successfully: " + zipPath;

        } catch (Exception e) {
            log.error("Failed to generate React app", e);
            throw new ServiceException("Failed to generate React app", e);
        }
    }
    private String getSimpleClassName(String fullClassName) {
        return fullClassName.substring(fullClassName.lastIndexOf('.') + 1);
    }

    private void writeBasicIndexJs(String basePath) throws IOException {
        String content = "import React from 'react';\n" +
                "import ReactDOM from 'react-dom/client';\n" +
                "import App from './App';\n" +
                "import '@fontsource/roboto';\n" +
                "\n" +
                "const root = ReactDOM.createRoot(document.getElementById('root'));\n" +
                "root.render(<App />);";
        writeToFile(basePath + "/src/index.js", content);
    }

    private void writeBasicAppJs(String basePath, String firstCaptialReactComponent) throws IOException {
        String content = "import React from 'react';\n" +
                "import " + firstCaptialReactComponent + "Crud from './components/" + firstCaptialReactComponent + "Crud';\n" +
                "\n" +
                "function App() {\n" +
                "  return (\n" +
                "    <div style={{ margin: 20 }}>\n" +
                "      <" + firstCaptialReactComponent + "Crud />\n" +
                "    </div>\n" +
                "  );\n" +
                "}\n" +
                "\n" +
                "export default App;";
        writeToFile(basePath + "/src/App.js", content);
    }

    private void writeBasicPackageJson(String basePath) throws IOException {
        String content = "{\n" +
                "  \"name\": \"generated-react-app\",\n" +
                "  \"version\": \"0.1.0\",\n" +
                "  \"private\": true,\n" +
                "  \"dependencies\": {\n" +
                "    \"react\": \"^18.2.0\",\n" +
                "\"react-scripts\": \"5.0.1\",\n" +
                "    \"@fontsource/roboto\": \"^5.0.0\",\n" +
                "    \"react-dom\": \"^18.2.0\",\n" +
                "    \"@mui/material\": \"^5.14.4\",\n" +
                "    \"@emotion/react\": \"^11.11.1\",\n" +
                "    \"@emotion/styled\": \"^11.11.0\",\n" +
                "    \"axios\": \"^1.4.0\"\n" +
                "  },\n" +
                "  \"scripts\": {\n" +
                "    \"start\": \"react-scripts start\",\n" +
                "    \"build\": \"react-scripts build\",\n" +
                "    \"test\": \"react-scripts test\",\n" +
                "    \"eject\": \"react-scripts eject\"\n" +
                "  }\n" +
                "}";
        writeToFile(basePath + "/package.json", content);
    }

    private void writeBasicIndexHtml(String basePath) throws IOException {
        String content = "<!DOCTYPE html>\n" +
                "<html lang=\"en\">\n" +
                "<head>\n" +
                "  <meta charset=\"utf-8\" />\n" +
                "  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n" +
                "  <title>Generated React App</title>\n" +
                "</head>\n" +
                "<body>\n" +
                "  <div id=\"root\"></div>\n" +
                "</body>\n" +
                "</html>";
        writeToFile(basePath + "/public/index.html", content);
    }

    private void writeToFile(String filePath, String content) throws IOException {
        File file = new File(filePath);
        file.getParentFile().mkdirs();
        try (FileWriter fw = new FileWriter(file)) {
            fw.write(content);
        }
    }

    private void zipFolder(String sourceDirPath, String zipFilePath) throws IOException {
        log.info("React app generation complete for entity");
        Path sourceDir = Paths.get(sourceDirPath);
        try (ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(zipFilePath))) {
            Files.walk(sourceDir)
                    .filter(path -> !Files.isDirectory(path))
                    .forEach(path -> {
                        ZipEntry zipEntry = new ZipEntry(sourceDir.relativize(path).toString());
                        try {
                            zos.putNextEntry(zipEntry);
                            Files.copy(path, zos);
                            zos.closeEntry();
                        } catch (IOException e) {
                            log.error("Error zipping file: " + path, e);
                        }
                    });
        }
    }

    public void deleteDirectory(File directory) {
        if (directory.exists()) {
            File[] files = directory.listFiles();
            if (files != null) {
                for (File file : files) {
                    if (file.isDirectory()) {
                        deleteDirectory(file);
                    } else {
                        file.delete();
                    }
                }
            }
            directory.delete();
        }
    }
}
